name: Build and Deploy Services

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
  
jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      gateway: ${{ steps.changes.outputs.gateway }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      order-service: ${{ steps.changes.outputs.order-service }}
      goongmap-service: ${{ steps.changes.outputs.goongmap-service }}
      any_changed: ${{ steps.check.outputs.any_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes in services
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            gateway:
              - 'gateway/**'
            auth-service:
              - 'auth-service/**'
            order-service:
              - 'order-service/**'
            goongmap-service:
              - 'goongmap-service/**'

      - name: Check if any service changed
        id: check
        run: |
          if [[ "${{ steps.changes.outputs.gateway }}" == "true" ]] || \
             [[ "${{ steps.changes.outputs.auth-service }}" == "true" ]] || \
             [[ "${{ steps.changes.outputs.order-service }}" == "true" ]] || \
             [[ "${{ steps.changes.outputs.goongmap-service }}" == "true" ]]; then
            echo "any_changed=true" >> $GITHUB_OUTPUT
          else
            echo "any_changed=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any_changed == 'true'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - gateway
          - auth-service
          - order-service
          - goongmap-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if service changed
        id: should_build
        run: |
          SERVICE="${{ matrix.service }}"
          CHANGED="${{ needs.detect-changes.outputs[matrix.service] }}"
          
          if [[ "$CHANGED" == "true" ]]; then
            echo "Service $SERVICE has changes, will build"
            echo "build=true" >> $GITHUB_OUTPUT
          else
            echo "Service $SERVICE has no changes, skipping"
            echo "build=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up JDK 21
        if: steps.should_build.outputs.build == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        if: steps.should_build.outputs.build == 'true'
        run: |
          chmod +x ${{ matrix.service }}/gradlew

      - name: Build with Gradle
        if: steps.should_build.outputs.build == 'true'
        run: |
          cd ${{ matrix.service }}
          ./gradlew clean bootJar --no-daemon

      - name: Verify JAR file exists
        if: steps.should_build.outputs.build == 'true'
        run: |
          if [ ! -f ${{ matrix.service }}/build/libs/*.jar ]; then
            echo "Error: JAR file not found!"
            exit 1
          fi
          ls -lah ${{ matrix.service }}/build/libs/

      - name: Set up Docker Buildx
        if: steps.should_build.outputs.build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.should_build.outputs.build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Extract metadata for Docker
        if: steps.should_build.outputs.build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/pbl6-quickdn-be/${{ matrix.service }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        if: steps.should_build.outputs.build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        if: steps.should_build.outputs.build == 'true'
        run: echo "Image pushed with digest ${{ steps.meta.outputs.digest }}"

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: needs.detect-changes.outputs.any_changed == 'true' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create project directory if not exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Tạo thư mục nếu chưa có
            mkdir -p ~/pbl6-backend
            echo "Project directory ready at: ~/pbl6-backend"
            ls -la ~/pbl6-backend

      - name: Create .env file on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ~/pbl6-backend
            
            # Backup existing .env if exists
            if [ -f .env ]; then
              cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
              echo "Backed up existing .env"
            fi
            
            # Create new .env file
            cat > .env << 'EOF'
            # Registry Configuration
            REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }}
            
            # Database Configuration - Auth Service
            AUTH_DB_NAME=${{ secrets.AUTH_DB_NAME }}
            AUTH_DB_USER=${{ secrets.AUTH_DB_USER }}
            AUTH_DB_PASSWORD=${{ secrets.AUTH_DB_PASSWORD }}
            
            # Database Configuration - Goongmap Service
            GOONGMAP_DB_NAME=${{ secrets.GOONGMAP_DB_NAME }}
            GOONGMAP_DB_USER=${{ secrets.GOONGMAP_DB_USER }}
            GOONGMAP_DB_PASSWORD=${{ secrets.GOONGMAP_DB_PASSWORD }}
            
            # Database Configuration - Order Service
            ORDER_DB_NAME=${{ secrets.ORDER_DB_NAME }}
            ORDER_DB_USER=${{ secrets.ORDER_DB_USER }}
            ORDER_DB_PASSWORD=${{ secrets.ORDER_DB_PASSWORD }}
            
            # JWT Configuration
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_ACCESS_EXP_MS=${{ secrets.JWT_ACCESS_EXP_MS }}
            JWT_REFRESH_EXP_MS=${{ secrets.JWT_REFRESH_EXP_MS }}
            
            # API Keys
            GOONGMAP_API_KEY=${{ secrets.GOONGMAP_API_KEY }}
            
            # CORS Configuration
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            CORS_ALLOWED_METHODS=${{ secrets.CORS_ALLOWED_METHODS }}
            CORS_ALLOWED_HEADERS=${{ secrets.CORS_ALLOWED_HEADERS }}
            CORS_EXPOSED_HEADERS=${{ secrets.CORS_EXPOSED_HEADERS }}
            CORS_ALLOW_CREDENTIALS=${{ secrets.CORS_ALLOW_CREDENTIALS }}
            
            # Spring Profile
            SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}
            EOF
            
            echo ".env file created successfully"
            ls -la .env

      - name: Copy docker-compose.prod.yml to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "docker-compose.prod.yml"
          target: "~/pbl6-backend/"
          strip_components: 0

      - name: Rename docker-compose file on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ~/pbl6-backend
            mv docker-compose.prod.yml docker-compose.yml || true
            echo "docker-compose.yml updated successfully"

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          GATEWAY_CHANGED: ${{ needs.detect-changes.outputs.gateway }}
          AUTH_SERVICE_CHANGED: ${{ needs.detect-changes.outputs.auth-service }}
          ORDER_SERVICE_CHANGED: ${{ needs.detect-changes.outputs.order-service }}
          GOONGMAP_SERVICE_CHANGED: ${{ needs.detect-changes.outputs.goongmap-service }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          envs: GATEWAY_CHANGED,AUTH_SERVICE_CHANGED,ORDER_SERVICE_CHANGED,GOONGMAP_SERVICE_CHANGED
          script: |
            set -e
            
            echo "==================================="
            echo "Starting deployment process..."
            echo "==================================="
            
            # Navigate to docker-compose directory
            cd ~/pbl6-backend
            
            # Login to GitHub Container Registry
            echo "${{ secrets.REGISTRY_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
            
            # Array to track which services need to be redeployed
            SERVICES_TO_DEPLOY=()
            
            # Check which services changed and pull new images
            if [[ "$GATEWAY_CHANGED" == "true" ]]; then
              echo "Gateway changed - pulling new image..."
              docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/pbl6-quickdn-be/gateway:latest
              SERVICES_TO_DEPLOY+=("gateway")
            fi
            
            if [[ "$AUTH_SERVICE_CHANGED" == "true" ]]; then
              echo "Auth service changed - pulling new image..."
              docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/pbl6-quickdn-be/auth-service:latest
              SERVICES_TO_DEPLOY+=("auth-service")
            fi
            
            if [[ "$ORDER_SERVICE_CHANGED" == "true" ]]; then
              echo "Order service changed - pulling new image..."
              docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/pbl6-quickdn-be/order-service:latest
              SERVICES_TO_DEPLOY+=("order-service")
            fi
            
            if [[ "$GOONGMAP_SERVICE_CHANGED" == "true" ]]; then
              echo "Goongmap service changed - pulling new image..."
              docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/pbl6-quickdn-be/goongmap-service:latest
              SERVICES_TO_DEPLOY+=("goongmap-service")
            fi
            
            # Update docker-compose.yml to use registry images instead of building
            echo "Updating docker-compose configuration..."
            
            # Restart only changed services
            if [ ${#SERVICES_TO_DEPLOY[@]} -gt 0 ]; then
              echo "Restarting services: ${SERVICES_TO_DEPLOY[@]}"
              
              for service in "${SERVICES_TO_DEPLOY[@]}"; do
                echo "Stopping $service..."
                docker compose stop $service || true
                
                echo "Removing $service container..."
                docker compose rm -f $service || true
                
                echo "Starting $service with new image..."
                docker compose up -d $service
              done
              
              echo "==================================="
              echo "Deployment completed successfully!"
              echo "Services deployed: ${SERVICES_TO_DEPLOY[@]}"
              echo "==================================="
              
              # Show status
              docker compose ps
            else
              echo "No services to deploy"
            fi
            
            # Cleanup old images
            echo "Cleaning up old images..."
            docker image prune -f
            
            # Logout from registry
            docker logout ${{ env.REGISTRY }}

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ~/pbl6-backend
            
            echo "==================================="
            echo "Verifying deployment..."
            echo "==================================="
            
            # Check running containers
            docker compose ps
            
            # Check logs for errors (last 50 lines)
            echo ""
            echo "Recent logs:"
            docker compose logs --tail=50
