name: Build and Deploy Services

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
  
jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - gateway
          - auth-service
          - order-service
          - goongmap-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: |
          chmod +x ${{ matrix.service }}/gradlew

      - name: Build with Gradle
        run: |
          cd ${{ matrix.service }}
          ./gradlew clean bootJar --no-daemon

      - name: Verify JAR file exists
        run: |
          shopt -s nullglob
          FILES=(${{ matrix.service }}/build/libs/*.jar)
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "Error: JAR file not found in ${{ matrix.service }}/build/libs/"
            ls -lah ${{ matrix.service }}/build/libs/ || true
            exit 1
          else
            echo "Found JAR(s):"
            ls -lah ${{ matrix.service }}/build/libs/
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/pbl6-quickdn-be/${{ matrix.service }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo "Image pushed for ${{ matrix.service }}"

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create project directory if not exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Tạo thư mục nếu chưa có
            mkdir -p ~/pbl6-backend
            echo "Project directory ready at: ~/pbl6-backend"
            ls -la ~/pbl6-backend

      - name: Create .env file on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ~/pbl6-backend
            
            # Backup existing .env if exists
            if [ -f .env ]; then
              cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
              echo "Backed up existing .env"
            fi
            
            # Create new .env file
            cat > .env << 'EOF'
            # Registry Configuration
            REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }}
            
            # Database Configuration - Auth Service
            AUTH_DB_NAME=${{ secrets.AUTH_DB_NAME }}
            AUTH_DB_USER=${{ secrets.AUTH_DB_USER }}
            AUTH_DB_PASSWORD=${{ secrets.AUTH_DB_PASSWORD }}
            
            # Database Configuration - Goongmap Service
            GOONGMAP_DB_NAME=${{ secrets.GOONGMAP_DB_NAME }}
            GOONGMAP_DB_USER=${{ secrets.GOONGMAP_DB_USER }}
            GOONGMAP_DB_PASSWORD=${{ secrets.GOONGMAP_DB_PASSWORD }}
            
            # Database Configuration - Order Service
            ORDER_DB_NAME=${{ secrets.ORDER_DB_NAME }}
            ORDER_DB_USER=${{ secrets.ORDER_DB_USER }}
            ORDER_DB_PASSWORD=${{ secrets.ORDER_DB_PASSWORD }}
            
            # JWT Configuration
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_ACCESS_EXP_MS=${{ secrets.JWT_ACCESS_EXP_MS }}
            JWT_REFRESH_EXP_MS=${{ secrets.JWT_REFRESH_EXP_MS }}
            
            # API Keys
            GOONGMAP_API_KEY=${{ secrets.GOONGMAP_API_KEY }}
            
            # CORS Configuration
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            CORS_ALLOWED_METHODS=${{ secrets.CORS_ALLOWED_METHODS }}
            CORS_ALLOWED_HEADERS=${{ secrets.CORS_ALLOWED_HEADERS }}
            CORS_EXPOSED_HEADERS=${{ secrets.CORS_EXPOSED_HEADERS }}
            CORS_ALLOW_CREDENTIALS=${{ secrets.CORS_ALLOW_CREDENTIALS }}
            
            # Spring Profile
            SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}
            EOF
            
            echo ".env file created successfully"
            ls -la .env

      - name: Copy docker-compose.prod.yml to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "docker-compose.prod.yml"
          target: "~/pbl6-backend/"
          strip_components: 0

      - name: Rename docker-compose file on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ~/pbl6-backend
            mv docker-compose.prod.yml docker-compose.yml || true
            echo "docker-compose.yml updated successfully"

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -e
            
            echo "==================================="
            echo "Starting deployment process..."
            echo "==================================="
            
            # Navigate to docker-compose directory
            cd ~/pbl6-backend
            
            # Login to GitHub Container Registry
            echo "${{ secrets.REGISTRY_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
            
            echo "Pulling latest images for all services..."
            docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/pbl6-quickdn-be/gateway:latest || true
            docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/pbl6-quickdn-be/auth-service:latest || true
            docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/pbl6-quickdn-be/order-service:latest || true
            docker pull ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/pbl6-quickdn-be/goongmap-service:latest || true

            echo "Recreating all services with latest images..."
            docker compose up -d --force-recreate
            
            echo "==================================="
            echo "Deployment completed successfully!"
            echo "==================================="
            
            # Show status
            docker compose ps
            
            # Cleanup old images
            echo "Cleaning up old images..."
            docker image prune -f
            
            # Logout from registry
            docker logout ${{ env.REGISTRY }}

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd ~/pbl6-backend
            
            echo "==================================="
            echo "Verifying deployment..."
            echo "==================================="
            
            # Check running containers
            docker compose ps
            
            # Check logs for errors (last 50 lines)
            echo ""
            echo "Recent logs:"
            docker compose logs --tail=50
